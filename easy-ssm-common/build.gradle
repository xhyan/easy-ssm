group 'com.xhyan'
version '1.0-SNAPSHOT'

apply plugin: 'org.flywaydb.flyway'

//配置插件仓库
buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath: 'mysql:mysql-connector-java:5.1.36'
        classpath  'org.flywaydb:flyway-gradle-plugin:4.0'
    }
}

configurations {
    mybatisGenerator
}

dependencies {

    compile 'org.mybatis:mybatis:3.4.0'
    compile 'org.mybatis:mybatis-spring:1.3.0'
    compile 'org.apache.shiro:shiro-web:1.2.4'
    compile 'mysql:mysql-connector-java:5.1.38'
    compile 'org.apache.shiro:shiro-spring:1.2.4'
    compile 'com.github.pagehelper:pagehelper:4.1.3'
    compile 'org.springframework:spring-webmvc:4.2.5.RELEASE'
    compile 'org.springframework:spring-orm:4.2.5.RELEASE'
    compile 'org.springframework:spring-context-support:4.2.5.RELEASE'

    compile 'javax.mail:mail:1.4.7'
    compile 'tk.mybatis:mapper:3.3.8'
    compile 'org.slf4j:slf4j-log4j12:1.7.21'
    compile 'org.aspectj:aspectjweaver:1.8.9'
    compile 'org.apache.tomcat:tomcat-jdbc:8.0.33'
    compile 'com.alibaba:druid:1.0.20'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.7.3'
    compile 'commons-fileupload:commons-fileupload:1.3.1'

    //providedCompile 'javax.servlet:javax.servlet-api:3.1.0'

    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.2'
    mybatisGenerator 'mysql:mysql-connector-java:5.1.38'
    mybatisGenerator 'tk.mybatis:mapper:3.3.8'
}

sourceSets {
    main {
        resources {
            srcDir("src/main")
        }
    }
}

def getDbProperties = {
    def properties = new Properties()
//    def dbPropertiesPath = sourceSets.main.resources.srcDirs[0].path;
    file("src/main/resources/config/jdbc-mysql.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }

    properties;

}

flyway {
    def prop = getDbProperties()
    user = prop.getProperty('jdbc.username')
    url = prop.getProperty('jdbc.url')
    password = prop.getProperty('jdbc.password')
    locations = ["filesystem:db/pay.sql"]

}



// mybatis生成基本对象的任务
task mybatisGenerate << {
    def prop = getDbProperties()

    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClass'] = prop.getProperty('jdbc.driver')
    ant.properties['connectionURL'] = prop.getProperty('jdbc.url')
    ant.properties['userId'] = prop.getProperty('jdbc.username')
    ant.properties['password'] = prop.getProperty('jdbc.password')
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
    ant.properties['modelPackage'] = this.modelPackage
    ant.properties['mapperPackage'] = this.mapperPackage
    ant.properties['sqlMapperPackage'] = this.sqlMapperPackage

    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: true,
            configfile: 'src/main/resources/db/generatorConfig.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'userId')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')

        }
    }
}
