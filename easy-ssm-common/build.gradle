group 'com.xhyan'
version '1.0-SNAPSHOT'

apply plugin: 'org.flywaydb.flyway'

//配置插件仓库
buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath: 'mysql:mysql-connector-java:5.1.36'
        classpath  'org.flywaydb:flyway-gradle-plugin:4.0'
    }
}

configurations {
    mybatisGenerator
}

dependencies {
    //数据库连接池
    compile rootProject.ext.dependencies["druid"]
    //mybatis相关依赖
    compile rootProject.ext.dependencies["mybatis"]
    compile rootProject.ext.dependencies["mybatis-spring"]
    //shiro 权限控制依赖
    compile rootProject.ext.dependencies["shiro-spring"]
    compile rootProject.ext.dependencies["shiro-web"]
    //mySql数据库连接
    compile rootProject.ext.dependencies["mysql-connector-java"]
    //通用mapper工具
    compile rootProject.ext.dependencies["mapper"]
    //数据库分页插件
    compile rootProject.ext.dependencies["pagehelper"]
    //spring相关依赖

    compile rootProject.ext.dependencies["spring-orm"]
    compile rootProject.ext.dependencies["spring-context-support"]
    //aop
    compile rootProject.ext.dependencies["aspectjweaver"]
    compile rootProject.ext.dependencies["mail"]
    compile rootProject.ext.dependencies["slf4j-log4j12"]
    //配置文件工具
    compile rootProject.ext.dependencies["owner"]


    //compile 'com.fasterxml.jackson.core:jackson-databind:2.7.3'
    //compile 'commons-fileupload:commons-fileupload:1.3.1'
    //providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
    //compile 'org.apache.tomcat:tomcat-jdbc:8.0.33'

    //mybatis生成器插件依赖
    mybatisGenerator rootProject.ext.dependencies["mybatis-generator"]
    mybatisGenerator rootProject.ext.dependencies["mysql-connector-java"]
    mybatisGenerator rootProject.ext.dependencies["mapper"]
}

sourceSets {
    main {
        resources {
            srcDir("src/main")
        }
    }
}

def getDbProperties = {
    def properties = new Properties()
//    def dbPropertiesPath = sourceSets.main.resources.srcDirs[0].path;
    file("src/main/resources/config/jdbc-mysql.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }

    properties;

}

flyway {
    def prop = getDbProperties()
    user = prop.getProperty('jdbc.username')
    url = prop.getProperty('jdbc.url')
    password = prop.getProperty('jdbc.password')
    locations = ["filesystem:db/pay.sql"]

}



// mybatis生成基本对象的任务
task mybatisGenerate << {
    def prop = getDbProperties()

    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClass'] = prop.getProperty('jdbc.driver')
    ant.properties['connectionURL'] = prop.getProperty('jdbc.url')
    ant.properties['userId'] = prop.getProperty('jdbc.username')
    ant.properties['password'] = prop.getProperty('jdbc.password')
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
    ant.properties['modelPackage'] = this.modelPackage
    ant.properties['mapperPackage'] = this.mapperPackage
    ant.properties['sqlMapperPackage'] = this.sqlMapperPackage

    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: true,
            configfile: 'src/main/resources/db/generatorConfig.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'userId')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')

        }
    }
}
